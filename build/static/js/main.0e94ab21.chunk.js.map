{"version":3,"sources":["Auth/firebase.js","Auth/authWithGoogle.js","Components/ParallaxAppBar.js","Pages/Home.js","Components/Layer.js","Api/Requests/getLayers.js","Pages/Art.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","provider","GoogleAuthProvider","authWithGoogle","setuser","console","log","auth","signInWithPopup","then","result","token","credential","accessToken","user","loggedIn","catch","error","errorCode","code","errorMessage","message","email","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ParallaxAppBar","login","classes","className","AppBar","position","color","style","boxShadow","Toolbar","IconButton","edge","aria-label","Typography","variant","Button","onClick","center","display","alignItems","minHeight","justifyContent","Home","nameLoggedIn","Layer","x","y","top","scale","left","src","onload","children","styleOuter","width","height","overflow","styleInner","alt","onLoad","getLayers","path","a","layersCollection","collection","ret","get","layers","layersRet","forEach","l","id","options","data","wrap","flexDirection","backgroundColor","overflowY","ParallaxArt","useState","none","imageUrl","artworkLayers","setartworkLayers","useParams","artwork","useEffect","Object","values","map","html","parse","ProvidedArt","parallaxController","useController","window","onresize","update","useLayoutEffect","addEventListener","removeEventListener","Art","App","name","displayName","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e94ab21.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\n\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBBS80nTMy6fGWvydIHYM4P5dE_czOBF2U\",\n  authDomain: \"parallax-art.firebaseapp.com\",\n  databaseURL: \"https://parallax-art.firebaseio.com\",\n  projectId: \"parallax-art\",\n  storageBucket: \"parallax-art.appspot.com\",\n  messagingSenderId: \"359463380945\",\n  appId: \"1:359463380945:web:bd20bac823da05910622f0\",\n  measurementId: \"G-F7CSSCZWB8\"\n};\n\nfirebase.initializeApp(firebaseConfig)\nconst db = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport {db,provider,firebase}","import {firebase,provider} from './firebase'\n\nconst authWithGoogle = (setuser) => {\n  \n  console.log(\"shoudl open popup\")\n  firebase.auth().signInWithPopup(provider).then(function(result) {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    var token = result.credential.accessToken;\n    // The signed-in user info.\n    var user = result.user;\n    setuser({loggedIn:true, token, user})\n    // ...\n  }).catch(function(error) {\n    // Handle Errors here.\n    var errorCode = error.code;\n    var errorMessage = error.message;\n    // The email of the user's account used.\n    var email = error.email;\n    // The firebase.auth.AuthCredential type that was used.\n    var credential = error.credential;\n    console.log(errorCode, errorMessage, email, credential)\n    // ...\n  });\n}\n\nexport default authWithGoogle","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ParallaxAppBar({login}) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='fixed' color=\"transparent\" style={{color:\"white\", boxShadow:\"none\"}}>\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Parallax Art\n          </Typography>\n          <Button \n            onClick={login}\n            color=\"inherit\"\n          >\n            Login\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react'\n\nconst center ={\n  display:'flex',\n  alignItems: 'center',\n  minHeight:\"100%\",\n  justifyContent: 'center',\n}\n\nconst Home = ({loggedIn,nameLoggedIn}) =>{\n\n  const message = () => {\n    if (loggedIn) {\n      return `Welcome ${nameLoggedIn}!` \n    } else {\n      return \"Login!\"\n    }\n  }\n\n  return (\n    <div style={center}> \n      <h1>{message()}</h1>\n    </div>\n  )\n}\n\nexport default Home","import React from 'react'\nimport { Parallax } from 'react-scroll-parallax';\n\nconst Layer = ({x, y, top, left, scale, src, onload, children}) => {\n\n  return (\n    <Parallax   \n      y={y} \n      x={x} \n      styleOuter={{position:'absolute', display:\"flex\", width:`${100*scale}vh`, height:`${100*scale}vh`, top:`${top - (50*scale)}vh`,overflow:'hidden'}}\n      styleInner={{display:'flex', justifyContent:\"center\", width:\"100%\", height:'100%',overflow:'hidden'}}\n    >\n        {src? <img src={src} style={{height:'100%'}} alt='window' onLoad={onload}/> : children}\n    </Parallax>\n  )\n}\n\nexport default Layer"," import {db} from '../../Auth/firebase'\n \n const getLayers = async (path) => {\n  const layersCollection = db.collection(path);\n  const ret = {}\n  try {\n    const layers = await layersCollection.get()\n    const layersRet = {}\n    layers.forEach(l=>{\n      if (l.id === \"options\"){\n        ret.options = l.data()\n      } else {\n        layersRet[l.id] = l.data()\n      }\n    })\n    ret.layers = layersRet\n    return ret\n  } catch (e) {\n    console.log(e)\n  }\n  \n}\n\nexport default getLayers","import React, {useLayoutEffect,useEffect, useState} from 'react'\nimport '../App.css'\nimport { useParams } from \"react-router-dom\";\nimport {useController, ParallaxProvider } from 'react-scroll-parallax';\nimport parse from 'html-react-parser';\n\nimport Layer from '../Components/Layer'\nimport {getLayers} from '../Api/api.js'\n\n//possible create more user friendly conrtoll, not a fan of x=[133,32] but for now leaving as to get MVP\nconst wrap = {\n  alignItems: 'center',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  width: '100%',\n  position: 'relative',\n  backgroundColor:' #000a13',\n  overflowY: 'scroll',\n}\n\nconst ParallaxArt = ({}) => {\n\n  const [artworkLayers, setartworkLayers] = useState({layers:{none:{imageUrl:\"nothing\"}}})\n  let { user, artwork } = useParams();\n\n  const top = 85\n\n  useEffect(() => {\n    getLayers(`/users/${user}/${artwork}`).then(x=>setartworkLayers(x))\n  }, [])\n\n  return (\n    <div className=\"Anomaly\">\n      <div className=\"Anomaly\" style={{...wrap, display: 'flex'}}>\n      {artworkLayers? Object.values(artworkLayers.layers).map(l=>{\n        if (l.html) {\n          return (\n            <Layer x={l.x} y={l.y} top={l.top} scale={l.scale|| 1}>\n              {parse(l.html)}\n            </Layer>\n          )\n        }\n        return <Layer x={l.x} y={l.y} top={l.top} src={l.imageUrl} scale={l.scale || 1} />\n      }): null}\n      </div>\n \n    </div>  \n  )\n}\n\nconst ProvidedArt = () => {\n  const { parallaxController } = useController();\n  window.onresize = () => {\n    parallaxController.update()\n  } \n  useLayoutEffect(() => {\n      window.addEventListener('load', () => parallaxController.update());\n      return () => window.removeEventListener('load', () => parallaxController.update());\n  }, [parallaxController,]);\n  \n  return (\n    <ParallaxArt />\n  )\n}\n\nconst Art = () => (\n  <ParallaxProvider>\n    <ProvidedArt />\n  </ParallaxProvider>\n)\n\nexport default Art","import React, {useState} from 'react';\nimport './App.css';\nimport authWithGoogle from './Auth/authWithGoogle.js'\nimport ParallaxAppBar from './Components/ParallaxAppBar.js'\nimport Home from './Pages/Home.js'\nimport Art from './Pages/Art'\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [user, setuser] = useState({loggedIn:false, name:\"\"})\n\n  return (\n    <div className=\"App\">\n      <ParallaxAppBar \n        login={()=>authWithGoogle(setuser)}\n      />\n\n      <Router>\n        <Switch>\n          <Route path=\"/art/:user/:artwork\">\n           <Art\n            \n           />\n          </Route>\n          <Route path=\"/\">\n           <Home \n            loggedIn={user.loggedIn}\n            nameLoggedIn={user.user?.displayName}\n           />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}